{"version":3,"sources":["reportWebVitals.js","components/AddCategory.jsx","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.jsx","GifExpertApp.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","addCategory","useState","newCategory","setNewCategory","error","errorHandle","onSubmit","e","preventDefault","type","onChange","target","value","className","GifGridItem","title","url","src","alt","GifGrid","category","images","loading","state","setState","useEffect","encodeURI","fetch","req","json","res","data","gifs","map","gif","id","downsized_medium","imgObject","catch","getGifs","useFetchGifs","image","GifExpertApp","categories","setCategory","cats","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,qBCyBCQ,EA7BK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACDC,mBAAS,IADR,mBAChCC,EADgC,KACnBC,EADmB,OAEVF,oBAAS,GAFC,mBAEhCG,EAFgC,KAEzBC,EAFyB,KAgBvC,OACE,uBAAMC,SAXU,SAACC,GACjBA,EAAEC,iBACkB,KAAhBN,EACFG,GAAY,IAEZA,GAAY,GACZL,EAAYE,GACZC,EAAe,MAIjB,UACE,uBAAOM,KAAK,OAAOC,SAfA,SAACH,GACtBJ,EAAeI,EAAEI,OAAOC,QAcuBA,MAAOV,IACnDE,EACC,sBAAMS,UAAU,QAAhB,kDACE,S,OCbKC,EATK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC5B,OACE,sBAAKH,UAAU,OAAf,UACE,qBAAKI,IAAKD,EAAKE,IAAKH,IACpB,kCAAKA,EAAL,WCgBSI,EAlBC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EACdnB,mBAAS,CACjCoB,OAAQ,GACRC,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KA+BxC,OAzBAC,qBAAU,YACQ,WACd,IAAMT,EAAG,iDAA6CU,UACpDN,GADO,sDAGTO,MAAMX,GACHvB,MAAK,SAACmC,GAAD,OAASA,EAAIC,UAClBpC,MAAK,SAACqC,GAAD,OAASA,EAAIC,QAClBtC,MAAK,SAACuC,GAAD,OACJA,EAAKC,KAAI,SAACC,GAAD,YAAU,CACjBC,GAAID,EAAIC,GACRpB,MAAOmB,EAAInB,MACXC,IAAG,UAAEkB,EAAIb,cAAN,aAAE,EAAYe,iBAAiBpB,WAGrCvB,MAAK,SAAC4C,GACLb,EAAS,CACPH,OAAO,YAAKgB,GACZf,SAAS,OAGZgB,OAAM,SAAClC,GAAD,OAAWA,KAEtBmC,KACC,CAACnB,IACGG,ED5BqBiB,CAAapB,GAAjCC,EADwB,EACxBA,OAAQC,EADgB,EAChBA,QAChB,OACE,qCACE,6BAAKF,IACJE,EACC,aAEA,qBAAKT,UAAU,YAAf,SACGQ,EAAOY,KAAI,SAACQ,GAAD,OACV,cAAC,EAAD,eAAgCA,GAAdA,EAAMN,aEUrBO,EApBM,WACnB,IADyB,EAESzC,mBADb,CAAC,wBADG,mBAElB0C,EAFkB,KAENC,EAFM,KAMzB,OACE,gCACE,iDACA,cAAC,EAAD,CAAa5C,YANG,SAACE,GACnB0C,GAAY,SAACC,GAAD,OAAW3C,GAAX,mBAA2B2C,UAMrC,uBACA,6BACGF,EAAWV,KAAI,SAACb,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCXxB0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B5D,M","file":"static/js/main.27f88c42.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ addCategory }) => {\n  const [newCategory, setNewCategory] = useState('');\n  const [error, errorHandle] = useState(false);\n  const changeCategory = (e) => {\n    setNewCategory(e.target.value);\n  };\n  const handleAdd = (e) => {\n    e.preventDefault();\n    if (newCategory === '') {\n      errorHandle(true);\n    } else {\n      errorHandle(false);\n      addCategory(newCategory);\n      setNewCategory('');\n    }\n  };\n  return (\n    <form onSubmit={handleAdd}>\n      <input type=\"text\" onChange={changeCategory} value={newCategory} />\n      {error ? (\n        <span className=\"error\"> Error: La caja de texto esta vacia </span>\n      ) : null}\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  addCategory: PropTypes.func.isRequired\n};\nexport default AddCategory;\n","import React from 'react';\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className='card'>\n      <img src={url} alt={title} />\n      <p> {title} </p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React from 'react';\nimport GifGridItem from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nconst GifGrid = ({ category }) => {\n  const { images, loading } = useFetchGifs(category);\n  return (\n    <>\n      <h4>{category}</h4>\n      {loading ? (\n        'Loading...'\n      ) : (\n        <div className=\"card-grid\">\n          {images.map((image) => (\n            <GifGridItem key={image.id} {...image} />\n          ))}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from 'react';\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    images: [],\n    loading: true\n  });\n\n  useEffect(() => {\n    const getGifs = () => {\n      const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n        category\n      )}&limit=10&api_key=JPU3y1rQZlxJnnGfKadNjHIRkWjX14XG`;\n      fetch(url)\n        .then((req) => req.json())\n        .then((res) => res.data)\n        .then((gifs) =>\n          gifs.map((gif) => ({\n            id: gif.id,\n            title: gif.title,\n            url: gif.images?.downsized_medium.url\n          }))\n        )\n        .then((imgObject) => {\n          setState({\n            images: [...imgObject],\n            loading: false\n          });\n        })\n        .catch((error) => error);\n    };\n    getGifs();\n  }, [category]);\n  return state;\n};\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n  const initialState = ['The last air bender'];\n  const [categories, setCategory] = useState(initialState);\n  const addCategory = (newCategory) => {\n    setCategory((cats) => [newCategory, ...cats]);\n  };\n  return (\n    <div>\n      <h2>Gif Expert App </h2>\n      <AddCategory addCategory={addCategory} />\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </div>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}